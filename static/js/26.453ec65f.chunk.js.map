{"version":3,"file":"static/js/26.453ec65f.chunk.js","mappings":"yRAEMA,EAAU,6BACVC,EAAU,mCAEHC,EAAU,mCAAG,sGACDC,EAAAA,EAAAA,IAAA,kEACsCF,IAFrC,uBAChBG,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,qDAQVC,EAAU,mCAAG,WAAMC,GAAN,yFACDH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACgBC,EADhB,iCACgDK,EADhD,gCADC,uBAChBF,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,sDAQVG,EAAS,mCAAG,WAAMC,GAAN,yFACAL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCQ,EADD,oBACoBP,EADpB,oBADA,uBACfG,EADe,EACfA,KADe,kBAKhBA,GALgB,2CAAH,sDAQTK,EAAS,mCAAG,WAAMD,GAAN,yFACAL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCQ,EADD,4BAC4BP,EAD5B,oBADA,uBACfG,EADe,EACfA,KADe,kBAKhBA,GALgB,2CAAH,qD,0KCMtB,EA/BqB,SAAC,GAAkB,IAAhBM,EAAe,EAAfA,SAetB,OACE,kBAAMA,SAfa,SAAAC,GACnBA,EAAEC,iBAEF,IAAMN,EAAQK,EAAEE,OAAOC,SAASR,MAAMS,MAEjCT,GAKLI,EAASJ,GACTK,EAAEE,OAAOG,SALPC,EAAAA,GAAAA,MAAY,yBAMf,EAGC,WACE,kBACEC,KAAK,QACLC,KAAK,OACLC,YAAY,mBAEd,mBAAQD,KAAK,SAAb,yBAGL,ECkCD,EArDe,WACb,OAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRvB,EAAK,UAAGmB,EAAaK,IAAI,gBAApB,QAAgC,GAC3C,GAAKxB,EAAL,CAEA,IAAMyB,EAAQ,mCAAG,gHAEa1B,EAAAA,EAAAA,IAAWC,GAFxB,gBAIU,KAFf0B,EAFK,EAELA,SAEIC,QACVhB,EAAAA,GAAAA,UACAA,EAAAA,GAAAA,MAAY,mBACZM,EAAU,KAEVA,EAAUS,GATC,gDAYbf,EAAAA,GAAAA,MAAY,KAAMiB,SAClBX,EAAU,IAbG,yDAAH,qDAiBdQ,GAnBkB,CAoBnB,GAAE,CAACN,IAMJ,OACE,iCACE,yCACA,SAAC,EAAD,CAAcf,SAPG,SAAAJ,GACnBoB,EAAgB,CAAEpB,MAAAA,GACnB,IAK4C,KACzC,wBACGgB,EAAOa,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CACEC,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMb,GAFjB,SAIGS,EAAMK,SALFL,EAAME,GADA,QAaxB,C","sources":["components/api/Api.jsx","components/searchmovies/SearchMovies.jsx","components/pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '6f70f7d8034c486bbf0597ae252bbef6';\n\nexport const fetchTrend = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const fetchMovie = async query => {\n  const { data } = await axios.get(\n    `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n\nexport const fetchById = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\nimport './SearchMovies.module.css';\n\nconst SearchMovies = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const query = e.target.elements.query.value;\n\n    if (!query) {\n      toast.error('Please enter something');\n      return;\n    }\n\n    onSubmit(query);\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"query\"\n        type=\"text\"\n        placeholder=\"Search movies\"\n      />\n      <button type=\"submit\">Search...</button>\n    </form>\n  );\n};\n\nSearchMovies.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchMovies;\n","import { useState, useEffect } from 'react';\nimport {\n  useSearchParams,\n  useLocation,\n} from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { Link } from 'react-router-dom';\nimport { fetchMovie } from '../api/Api';\nimport SearchMovies from '../searchmovies/SearchMovies';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const query = searchParams.get('query') ?? '';\n    if (!query) return;\n\n    const getMovie = async () => {\n      try {\n        const { results } = await fetchMovie(query);\n\n        if (results.length === 0) {\n          toast.dismiss();\n          toast.error('No movies found');\n          setMovies([]);\n        } else {\n          setMovies(results);\n        }\n      } catch (error) {\n        toast.error(error.message);\n        setMovies([]);\n      }\n    };\n\n    getMovie();\n  }, [searchParams]);\n\n  const handleSubmit = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <>\n      <h1>Movies Page</h1>\n      <SearchMovies onSubmit={handleSubmit} />{' '}\n      <ol>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["baseURL","API_KEY","fetchTrend","axios","data","fetchMovie","query","fetchById","movieId","fetchCast","onSubmit","e","preventDefault","target","elements","value","reset","toast","name","type","placeholder","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","get","getMovie","results","length","message","map","movie","to","id","state","from","title"],"sourceRoot":""}